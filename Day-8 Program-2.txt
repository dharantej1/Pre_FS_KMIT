You are given a string S, consist of both lowercase and uppercase alphabets.

Your task is to find out the length of the longest word W with the 
following properties:
	- The word W should be the longest.
	- The word W can be formed with letters of S of your choice.
	- The word W should be equal to the reverse of it, in order to achieve this
	  you can shuffle the letters of W as your need. You cannot use the letters 
	  more than their occurence count as in S.
	
NOTE: Alphabets are case sensitive
"Aa" is  not equal to "aA". The letters 'a' and 'A' are not same

Input Format:
-------------
A string S, consist of lower/uppercase letters

Output Format:
--------------
Print an integer, length of longest word W.


Sample Input-1:
---------------
pqrrrrss

Sample Output-1:
----------------
7

Explanation:
------------
One of the longest word can be formed is "srrqrrs", with length 7.


Sample Input-2:
---------------
AIbohPhObia

Sample Output-2:
----------------
5

Explanation:
------------
One of the longest word can be formed is "bhPhb", with length 5.
#include<bits/stdc++.h>
using namespace std;
int main()
{
    string str;
    cin>>str;
    unordered_map<char,int> m;
    for(auto x:str)
    {
        m[x]++;
    }
    int l=1;
    int count=0;
    for(auto x:m)
    {
        if(x.second!=1)
        {
            if(x.second%2==0)
            {
                count+=x.second;
            }
            else
            {
                count+=x.second-1;
            }
        }
        else
        {
            l=1;
        }
    }
    cout<<count+l;
}