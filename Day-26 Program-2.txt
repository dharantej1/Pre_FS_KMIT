/*
Vishal has given a task to find the successor of a given alphabet 'alp' in a 
given string str[].

The alphabets in the given string str[] are all lowercase letters and always in 
non-decreasing order.

A successor of 'alp' is the next smallest alphabet exist in the string str[] 
which is greater than 'alp'.

Assume that alphabets can be considered in cyclic fashion.
For example: Successor for alp='z' in str[]="bcd" is 'b'.

Help Vishal to retunn the answer.

Can you solve it in O(log(n)) complexity?

Input Format:
-------------
Line-1:A string str[]
Line-2: a character represents an alphabet.
 
Output Format:
--------------
Print a character which is the successor.
 
Constraints:
 2 <= str.length<= 10^4
'alp' is a lowercase letter.

 
Sample Input-1:
---------------
adghijl
f 
Sample Output-1:
----------------
g

Sample Input-2:
---------------
abcdefghi
j

Sample Output-2:
----------------
a

*/

s=str(input())
l=str(input())

def prev_alpha(s):
    return chr((ord(s.upper())-1 - 65) % 26 + 65)
index=s.find(prev_alpha(l))
# print(index)
if index>=len(s):
    print(s[0])
else:
    print(s[index+1])
50/100 passed