/*
Vihaar is working with strings. 
He is given two strings A and B, and another string T,
 where the length of A and B is same.
 
You can find the relative groups of letters from A and B,
using the following rule set:
	- Equality rule: 'p' == 'p'
 	- Symmetric rule: 'p' == 'q' is same as 'q' == 'p'
 	- Transitive rule: 'p' == 'q' and 'q' == 'r' indicates 'p' == 'r'.
 	
Vihaar has to form the relatively smallest string of T,
using the relative groups of letters.
 
For example, if A ="pqr" and B = "rst" , 
then we have 'p' == 'r', 'q' == 's', 'r' == 't' .

The relatives groups formed using above rule set are as follows: 
[p, r, t] and [q,s] and  String T ="tts", then relatively smallest string
is "ppq".
 
You will be given the strings A , B and T.
Your task is to help Vihaar to find the relatively smallest string of T.
 
Input Format:
-------------
Three space separated strings, A , B and T
 
Output Format:
--------------
Print a string, relatively smallest string of T.
 
 
Sample Input-1:
---------------
kmit ngit mgit
 
Sample Output-1:
----------------
 ggit
 
Explanation: 
------------
The relative groups using A nd B are [k, n], [m, g], [i], [t] and
the relatively smallest string of T is "ggit"
 
 
Sample Input-2:
---------------
attitude progress apriori
 
Sample Output-2:
----------------
 aaogoog
 
 Explanation: 
 ------------
 The relative groups using A nd B are [a, p], [t, r, o], [i, g] and [u, e, d, s]
 the relatively smallest string of T is "aaogoog"
*/

l=list(map(str,input().split()))[:3]
di={}
for i in range(len(l[0])):
    di[l[0][i]]=l[1][i]
print(di)
for i in list(l[2]):
    if (i in di.values()):
        print(i,end="")
    else:
        print(di[i],end="")
1/8 Test cases passed


#include<bits/stdc++.h>
using namespace std;
vector<int> par;
char find(char x){
    if(par[x - 'a'] == -1) return x - 'a';
    return par[x - 'a'] = find('a' + par[x - 'a']);
}

void unionn(char a, char b){
      int A = find(a);
      int B = find(b);
      if(A==B) return;
      if(A <B){
         par[B]=A;
      }else{
         par[A]=B;
      }
   }

int main(){
    string s1,s2,s3;
    cin>>s1>>s2>>s3;
    int n=s1.length();
    par= vector <int>(26, -1);
    for(int i = 0; i < s1.size(); i++){
         unionn(s1[i], s2[i]);
    }
    string s4= "";
    for(int i = 0; i < s3.size(); i++){
         s4+= find(s3[i])+'a';
    }
    cout<<s4;
}
8/8 passed